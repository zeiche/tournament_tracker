#!/usr/bin/env python3
"""
twilio configuration helper

generates asterisk pjsip config for twilio trunk
manages twilio credentials and settings
"""

import os
from pathlib import Path
from typing import Dict, Any

class TwilioConfig:
    """
    twilio configuration manager for asterisk integration
    """
    
    def __init__(self):
        """load twilio settings from environment"""
        # twilio credentials (api keys preferred over auth token)
        self.account_sid = os.getenv('TWILIO_ACCOUNT_SID', '')
        self.api_key = os.getenv('TWILIO_API_KEY', '')
        self.api_secret = os.getenv('TWILIO_API_SECRET', '')
        self.auth_token = os.getenv('TWILIO_AUTH_TOKEN', '')  # fallback if no api keys
        self.phone_number = os.getenv('TWILIO_PHONE_NUMBER', '')
        
        # twilio sip settings
        self.sip_domain = os.getenv('TWILIO_SIP_DOMAIN', '')
        self.sip_username = os.getenv('TWILIO_SIP_USERNAME', '')
        self.sip_password = os.getenv('TWILIO_SIP_PASSWORD', '')
        
        # twilio endpoints
        self.voice_url = os.getenv('TWILIO_VOICE_URL', 'http://your-server.com/twilio/voice')
        self.sms_url = os.getenv('TWILIO_SMS_URL', 'http://your-server.com/twilio/sms')
        self.status_callback = os.getenv('TWILIO_STATUS_CALLBACK', 'http://your-server.com/twilio/status')
        
        # asterisk settings
        self.asterisk_external_ip = os.getenv('ASTERISK_EXTERNAL_IP', '')
        self.asterisk_local_net = os.getenv('ASTERISK_LOCAL_NET', '192.168.0.0/16')
        
    def generate_pjsip_config(self) -> str:
        """
        generate pjsip.conf content for twilio trunk
        
        returns:
            pjsip configuration text
        """
        config = f"""
; twilio sip trunk configuration
; generated by bonjour_twilio module

; transport
[transport-udp]
type=transport
protocol=udp
bind=0.0.0.0:5060
external_media_address={self.asterisk_external_ip}
external_signaling_address={self.asterisk_external_ip}
local_net={self.asterisk_local_net}

[transport-tcp]
type=transport
protocol=tcp
bind=0.0.0.0:5060

[transport-tls]
type=transport
protocol=tls
bind=0.0.0.0:5061
cert_file=/etc/asterisk/certs/asterisk.crt
priv_key_file=/etc/asterisk/certs/asterisk.key
method=tlsv1_2

; twilio trunk endpoint
[twilio]
type=endpoint
transport=transport-udp
context=from-twilio
disallow=all
allow=ulaw
allow=alaw
allow=g722
allow=opus
outbound_auth=twilio-auth
aors=twilio
identify_by=auth_username
direct_media=no
force_rport=yes
ice_support=yes
media_encryption=no
rtp_symmetric=yes
rewrite_contact=yes
send_rpid=yes
trust_id_inbound=yes
trust_id_outbound=yes
language=en
t38_udptl=no
t38_udptl_nat=no
dtmf_mode=rfc4733

; authentication
[twilio-auth]
type=auth
auth_type=userpass
username={self.sip_username if self.sip_username else 'your-sip-username'}
password={self.sip_password if self.sip_password else 'your-sip-password'}

; aor (address of record)
[twilio]
type=aor
contact=sip:{self.sip_domain if self.sip_domain else 'your-domain'}.sip.twilio.com
qualify_frequency=60
max_contacts=1

; registration (if using registration)
[twilio-reg]
type=registration
transport=transport-udp
outbound_auth=twilio-auth
server_uri=sip:{self.sip_domain if self.sip_domain else 'your-domain'}.sip.twilio.com
client_uri=sip:{self.sip_username if self.sip_username else 'your-username'}@{self.sip_domain if self.sip_domain else 'your-domain'}.sip.twilio.com
retry_interval=60
forbidden_retry_interval=600
expiration=3600

; identify (for incoming calls)
[twilio]
type=identify
endpoint=twilio
match=54.172.60.0/30
match=54.244.51.0/30
match=54.171.127.192/30
match=35.156.191.128/30
match=54.65.63.192/30
match=54.169.127.128/30
match=54.252.254.64/30
match=177.71.206.192/30

; acl for security
[acl-twilio]
type=acl
deny=0.0.0.0/0.0.0.0
permit=54.172.60.0/30
permit=54.244.51.0/30
permit=54.171.127.192/30
permit=35.156.191.128/30
permit=54.65.63.192/30
permit=54.169.127.128/30
permit=54.252.254.64/30
permit=177.71.206.192/30
"""
        return config
        
    def generate_extensions_config(self) -> str:
        """
        generate extensions.conf content for twilio
        
        returns:
            dialplan configuration
        """
        config = f"""
; twilio dialplan configuration
; generated by bonjour_twilio module

[from-twilio]
; incoming calls from twilio
exten => _+1NXXNXXXXXX,1,NoOp(Incoming call from ${{CALLERID(num)}})
 same => n,Answer()
 same => n,Wait(1)
 same => n,AGI(/home/ubuntu/claude/tournament_tracker/asterisk_agi_handler.py)
 same => n,Hangup()

; handle dids
exten => _1NXXNXXXXXX,1,Goto(from-twilio,${{EXTEN:1}},1)
exten => _NXXNXXXXXX,1,Goto(from-twilio,+1${{EXTEN}},1)

; catch all
exten => _X.,1,NoOp(Unknown DID: ${{EXTEN}})
 same => n,Answer()
 same => n,Playback(ss-noservice)
 same => n,Hangup()

[to-twilio]
; outgoing calls via twilio
exten => _1NXXNXXXXXX,1,NoOp(Outgoing call to ${{EXTEN}})
 same => n,Set(CALLERID(num)={self.phone_number if self.phone_number else '+1234567890'})
 same => n,Dial(PJSIP/+${{EXTEN}}@twilio,60,T)
 same => n,Hangup()

exten => _NXXNXXXXXX,1,Goto(to-twilio,1${{EXTEN}},1)
exten => _+1NXXNXXXXXX,1,Goto(to-twilio,${{EXTEN:1}},1)

; international calls
exten => _011.,1,NoOp(International call to ${{EXTEN}})
 same => n,Set(CALLERID(num)={self.phone_number if self.phone_number else '+1234567890'})
 same => n,Dial(PJSIP/+${{EXTEN:3}}@twilio,60,T)
 same => n,Hangup()

[claude-twilio]
; claude integration context
exten => s,1,Answer()
 same => n,Wait(1)
 same => n,AGI(/home/ubuntu/claude/tournament_tracker/asterisk_agi_handler.py)
 same => n,Hangup()

; voice assistant direct line
exten => 2583,1,Goto(claude-twilio,s,1)
"""
        return config
        
    def save_configs(self, backup: bool = True):
        """
        save configurations to files
        
        args:
            backup: whether to backup existing configs
        """
        # paths
        pjsip_path = Path('/etc/asterisk/pjsip_twilio.conf')
        extensions_path = Path('/etc/asterisk/extensions_twilio.conf')
        
        # generate configs
        pjsip_config = self.generate_pjsip_config()
        extensions_config = self.generate_extensions_config()
        
        # save to local directory for review
        local_dir = Path('asterisk_config')
        local_dir.mkdir(exist_ok=True)
        
        with open(local_dir / 'pjsip_twilio.conf', 'w') as f:
            f.write(pjsip_config)
            
        with open(local_dir / 'extensions_twilio.conf', 'w') as f:
            f.write(extensions_config)
            
        print(f"configs saved to {local_dir}")
        print("review and copy to /etc/asterisk/ when ready")
        
    def validate_config(self) -> Dict[str, Any]:
        """
        validate twilio configuration
        
        returns:
            validation results
        """
        results = {
            'valid': True,
            'errors': [],
            'warnings': []
        }
        
        # check required fields
        if not self.account_sid:
            results['errors'].append('TWILIO_ACCOUNT_SID not set')
            results['valid'] = False
            
        # check for either api keys or auth token
        if not self.api_key and not self.auth_token:
            results['errors'].append('Neither TWILIO_API_KEY nor TWILIO_AUTH_TOKEN set')
            results['valid'] = False
        elif self.api_key and not self.api_secret:
            results['errors'].append('TWILIO_API_KEY set but TWILIO_API_SECRET missing')
            results['valid'] = False
            
        if not self.phone_number:
            results['warnings'].append('TWILIO_PHONE_NUMBER not set - using default')
            
        if not self.sip_domain:
            results['warnings'].append('TWILIO_SIP_DOMAIN not set - manual config needed')
            
        if not self.asterisk_external_ip:
            results['warnings'].append('ASTERISK_EXTERNAL_IP not set - nat issues possible')
            
        return results
        

if __name__ == "__main__":
    # generate configs
    config = TwilioConfig()
    
    # validate
    validation = config.validate_config()
    print("configuration validation:")
    print(f"  valid: {validation['valid']}")
    if validation['errors']:
        print("  errors:")
        for error in validation['errors']:
            print(f"    - {error}")
    if validation['warnings']:
        print("  warnings:")
        for warning in validation['warnings']:
            print(f"    - {warning}")
    
    # save configs
    config.save_configs()
    print("\nconfigs generated in asterisk_config/")
    print("add required env vars to .env:")
    print("  TWILIO_ACCOUNT_SID=your-sid")
    print("  TWILIO_AUTH_TOKEN=your-token (or use API keys instead)")
    print("  TWILIO_API_KEY=SKxxxxxxxx (preferred over auth token)")
    print("  TWILIO_API_SECRET=your-secret (with api key)")
    print("  TWILIO_PHONE_NUMBER=+1234567890")
    print("  TWILIO_SIP_DOMAIN=your-domain")
    print("  TWILIO_SIP_USERNAME=your-username")
    print("  TWILIO_SIP_PASSWORD=your-password")
    print("  ASTERISK_EXTERNAL_IP=your-public-ip")