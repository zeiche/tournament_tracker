{"BonjourRegistry": {"name": "BonjourRegistry", "capabilities": ["Provides bonjour service registry", "Supports ask(), tell(), do() methods"], "examples": ["ask('list all services')", "ask('find service X')"], "announced_at": 1757869017.432753, "pid": 126207861342336}, "Tournament Model Service": {"name": "Tournament Model Service", "capabilities": ["Polymorphic tournament data model with ask/tell/do interface", "Tournament attendance and venue information tracking", "Geographic location analysis with coordinate support", "Tournament classification (major/minor/weekly events)", "Top 8 placements and standings integration", "Natural language tournament queries and updates", "Discord-friendly tournament formatting and display", "Automatic statistics calculation and sync operations"], "examples": ["tournament.ask('attendance')", "tournament.ask('is major')", "tournament.ask('top 8')", "tournament.tell('discord', tournament_data)", "tournament.do('sync with startgg')"], "announced_at": 1757869017.8750443, "pid": 126207861342336}, "Player Model Service": {"name": "Player Model Service", "capabilities": ["Polymorphic player data model with ask/tell/do interface", "Player statistics and tournament performance tracking", "Win rate calculations and ranking analysis", "Character mains and social media integration", "Natural language player queries and updates", "Discord-friendly player profile formatting", "Automatic points calculation and statistics updates"], "examples": ["player.ask('points')", "player.ask('win rate')", "player.ask('recent tournaments')", "player.tell('discord', player_data)", "player.do('calculate points')"], "announced_at": 1757869017.8779695, "pid": 126207861342336}, "Organization Model Service": {"name": "Organization Model Service", "capabilities": ["Polymorphic organization data model with ask/tell/do interface", "Tournament organizer contact and information management", "Organization merging and duplicate resolution", "Tournament history and venue tracking per organization", "Contact information management (Discord, Twitter, etc.)", "Natural language organization queries and updates", "Discord-friendly organization formatting and stats", "Organization network analysis and relationship tracking"], "examples": ["org.ask('tournaments')", "org.ask('contacts')", "org.ask('venues')", "org.tell('discord', org_data)", "org.do('add contact', type='discord', value='@user')"], "announced_at": 1757869017.8800054, "pid": 126207861342336}, "Database Service": {"name": "Database Service", "capabilities": ["Database with just 3 methods: ask(), tell(), do()", "Natural language queries accepted", "ask('tournament 123') - get any data", "tell('json', data) - format any output", "do('update tournament 123 name=foo') - perform actions"], "examples": ["db.ask('top 10 players')", "db.tell('discord', stats)", "db.do('merge org 1 into 2')"], "announced_at": 1757869018.9356494, "pid": 126207861342336}, "Tournament Models (Enhanced OOP)": {"name": "Tournament Models (Enhanced OOP)", "capabilities": ["200+ methods across Tournament, Player, Organization models", "Intelligent objects with built-in analytics", "Relationship traversal and cross-object queries", "Geographic intelligence via LocationMixin", "Temporal tracking via TimestampMixin", "Performance metrics: win_rate, podium_rate, consistency_score", "Tournament metrics: is_major, growth_rate, venue_quality", "Organization management: merge, contacts, network analysis", "Player journey tracking and skill progression", "Rich query builders with chainable methods", "Cached properties for expensive calculations", "SQLAlchemy ORM with type-safe operations"], "examples": ["tournament.distance_to(lat, lng) - Calculate distance", "player.win_rate - Get win percentage", "org.merge_into(target) - Merge organizations", "Tournament.get_major_tournaments(session) - Query majors", "player.get_tournament_history() - Get player journey"], "announced_at": 1757869017.9700222, "pid": 126207861342336}, "PolymorphicLogManager": {"name": "PolymorphicLogManager", "capabilities": ["I log polymorphic data to database", "I store structured log entries in 'log' table", "I accept any data type: objects, dicts, strings, errors", "I provide ask/tell/do interface for log queries", "Use me for all structured logging needs"], "examples": [], "announced_at": 1757869017.9814193, "pid": 126207861342336}, "GoSwitch__test_logs": {"name": "GoSwitch__test_logs", "capabilities": ["Provides go.py flag: --test-logs", "Help: Add sample log entries (or custom message: --test-logs 'your message')", "Handler: add_test_logs"], "examples": [], "announced_at": 1757869017.990929, "pid": 126207861342336}, "ProcessManagementGuide": {"name": "ProcessManagementGuide", "capabilities": ["PROVEN PATTERN: Add self-management to existing services", "STEP 1: Add imports - polymorphic_core.process_management.BaseProcessManager", "STEP 2: Create [ServiceName]ProcessManager(BaseProcessManager) class", "STEP 3: Set SERVICE_NAME, PROCESSES[], PORTS[] class variables", "STEP 4: Create global _[service]_process_manager instance", "STEP 5: Update go.py to import and use the process manager", "FALLBACK: Keep existing hardcoded patterns as backup"], "examples": [], "announced_at": 1757869017.9930463, "pid": 126207861342336}, "NextService_Discord": {"name": "NextService_Discord", "capabilities": ["TARGET: bonjour_discord.py (main Discord service file)", "PROCESSES: ['bonjour_discord.py'] (single process)", "PORTS: [] (Discord uses WebSocket, no specific ports)", "GO_PY_FLAGS: --discord-bot, --restart-services", "CURRENT_PATTERNS: kill_pattern('discord'), kill_pattern('polymorphic_discord')", "INTEGRATION: Add DiscordProcessManager to bonjour_discord.py"], "examples": [], "announced_at": 1757869017.9932623, "pid": 126207861342336}, "NextService_WebEditor": {"name": "NextService_WebEditor", "capabilities": ["TARGET: services/web_editor.py (main web editor file)", "PROCESSES: ['services/web_editor.py'] (single process)", "PORTS: [8081] (from advertisements)", "GO_PY_FLAGS: --edit-contacts, --restart-services", "CURRENT_PATTERNS: kill_pattern('web_editor'), kill_pattern('editor_service')", "INTEGRATION: Add WebEditorProcessManager to services/web_editor.py"], "examples": [], "announced_at": 1757869017.9932845, "pid": 126207861342336}, "ValidationCommands": {"name": "ValidationCommands", "capabilities": ["TEST_ANNOUNCEMENTS: python3 go.py --advertisements | grep ProcessManager", "TEST_STARTUP: python3 go.py --[service-flag]", "VERIFY_PROCESSES: ps aux | grep [service] | grep -v grep", "TEST_CLEANUP: import service; service._manager.cleanup_processes()", "INTEGRATION_TEST: python3 go.py --restart-services"], "examples": [], "announced_at": 1757869017.9932952, "pid": 126207861342336}, "PolymorphicAudioPlayer": {"name": "PolymorphicAudioPlayer", "capabilities": ["I play ANY audio that's announced as ready", "I listen for AUDIO_READY announcements", "I play through Discord voice channels", "I play through local speakers", "I announce AUDIO_PLAYED when complete"], "examples": [], "announced_at": 1757869018.7466576, "pid": 126207861342336}, "PolymorphicAudioProvider": {"name": "PolymorphicAudioProvider", "capabilities": ["Registered as discoverable capability"], "examples": [], "announced_at": 1757869018.7470708, "pid": 126207861342336}, "PolymorphicAudioRequest": {"name": "PolymorphicAudioRequest", "capabilities": ["Registered as discoverable capability"], "examples": [], "announced_at": 1757869018.7503316, "pid": 126207861342336}, "AUDIO_REQUEST": {"name": "AUDIO_REQUEST", "capabilities": ["REQUESTING: Audio data from ANY source", "FORMATS: wav, pcm, mp3, anything", "PURPOSE: Transcription and processing", "RESPOND: Announce AUDIO_AVAILABLE with your data"], "examples": [], "announced_at": 1757869018.7492669, "pid": 126207861342336}, "PolymorphicOpusDecoder": {"name": "PolymorphicOpusDecoder", "capabilities": ["Opus decoder initialized"], "examples": [], "announced_at": 1757869018.7646914, "pid": 126207861342336}, "PolymorphicTranscription": {"name": "PolymorphicTranscription", "capabilities": ["Registered as discoverable capability"], "examples": [], "announced_at": 1757869018.7650962, "pid": 126207861342336}, "AudioRequest": {"name": "AudioRequest", "capabilities": ["New audio handler registered. Total: 1"], "examples": [], "announced_at": 1757869018.7650778, "pid": 126207861342336}, "PolymorphicTTSService": {"name": "PolymorphicTTSService", "capabilities": ["Stream text-to-speech directly to mixer", "No file creation - pure streaming audio", "Multiple voice types (normal, robot, excited)", "Real-time audio synthesis", "Integrates with BonjourAudioMixer"], "examples": ["Listens for TEXT_TO_SPEECH announcements", "Streams audio directly to mixer via AUDIO_STREAM", "Use: announce('TEXT_TO_SPEECH', ['Hello world', 'normal'])"], "announced_at": 1757869018.7667847, "pid": 126207861342336}, "DiscordProcessManager": {"name": "DiscordProcessManager", "capabilities": ["I manage processes: networking/bonjour_discord.py", "I use no specific ports", "Call cleanup_processes to clean shutdown", "I am a PROCESS_MANAGER service"], "examples": [], "announced_at": 1757869018.7668793, "pid": 126207861342336}, "GoSwitch__discord_bot": {"name": "GoSwitch__discord_bot", "capabilities": ["Provides go.py flag: --discord-bot", "Help: START Discord bot service", "Handler: start_discord_bot_service"], "examples": [], "announced_at": 1757869018.7669463, "pid": 126207861342336}, "Error Handler Service": {"name": "Error Handler Service", "capabilities": ["Comprehensive error handling with 3-method pattern", "ask('error history') - Query error logs and patterns", "tell('discord', errors) - Format error reports", "do('handle exception') - Process and recover from errors", "Automatic severity classification and recovery"], "examples": ["error_handler.ask('recent errors')", "error_handler.do('clear history')", "error_handler.tell('json', error_data)"], "announced_at": 1757869018.7895818, "pid": 126207861342336}, "PolymorphicWebEditorProcessManager": {"name": "PolymorphicWebEditorProcessManager", "capabilities": ["I manage processes: services/polymorphic_web_editor.py", "I use ports: 8081", "Call cleanup_processes to clean shutdown", "I am a PROCESS_MANAGER service"], "examples": [], "announced_at": 1757869018.791812, "pid": 126207861342336}, "GoSwitch__web": {"name": "GoSwitch__web", "capabilities": ["Provides go.py flag: --web", "Help: START universal web editor (adapts to any mDNS service)", "Handler: start_web_service"], "examples": [], "announced_at": 1757869018.7918446, "pid": 126207861342336}, "Unified Report Service": {"name": "Unified Report Service", "capabilities": ["Consolidated reporting for tournaments", "Supports: console, heatmap, stats, all", "Single --report switch with subcommands"], "examples": ["report.generate_console_report()", "report.generate_heatmap()", "report.show_stats()"], "announced_at": 1757869018.9404347, "pid": 126207861342336}, "GoSwitch__report": {"name": "GoSwitch__report", "capabilities": ["Provides go.py flag: --report", "Help: START report generation (console|heatmap|stats|all)", "Handler: start_report_service"], "examples": [], "announced_at": 1757869018.9404829, "pid": 126207861342336}, "GoSwitch__interactive": {"name": "GoSwitch__interactive", "capabilities": ["Provides go.py flag: --interactive", "Help: START interactive bridge/repl (auto|lightweight|claude)", "Handler: start_interactive_service"], "examples": [], "announced_at": 1757869018.943107, "pid": 126207861342336}, "GoSwitch__ai": {"name": "GoSwitch__ai", "capabilities": ["Provides go.py flag: --ai", "Help: START AI chat service (chat|test|service)", "Handler: start_ai_service"], "examples": [], "announced_at": 1757869018.952031, "pid": 126207861342336}, "Unified Bonjour Service": {"name": "Unified Bonjour Service", "capabilities": ["Consolidated mDNS discovery operations", "Supports: ads, monitor, discover, server, lightweight", "Single --bonjour switch with subcommands"], "examples": ["bonjour.show_advertisements()", "bonjour.start_monitor()", "bonjour.start_discovery()"], "announced_at": 1757869018.9573135, "pid": 126207861342336}, "GoSwitch__bonjour": {"name": "GoSwitch__bonjour", "capabilities": ["Provides go.py flag: --bonjour", "Help: START Bonjour/mDNS operations (ads|monitor|discover|server|lightweight)", "Handler: start_bonjour_service"], "examples": [], "announced_at": 1757869018.9573455, "pid": 126207861342336}, "Essential Process Service": {"name": "Essential Process Service", "capabilities": ["Core system management operations", "Restart services and check status", "Cannot be consolidated - essential infrastructure"], "examples": ["process.restart_services()", "process.check_service_status()"], "announced_at": 1757869018.9596174, "pid": 126207861342336}, "GoSwitch__restart_services": {"name": "GoSwitch__restart_services", "capabilities": ["Provides go.py flag: --restart-services", "Help: Kill and restart all services", "Handler: restart_services_handler"], "examples": [], "announced_at": 1757869018.9598112, "pid": 126207861342336}, "GoSwitch__service_status": {"name": "GoSwitch__service_status", "capabilities": ["Provides go.py flag: --service-status", "Help: Check service status via bonjour signals", "Handler: service_status_handler"], "examples": [], "announced_at": 1757869018.960007, "pid": 126207861342336}, "GoSwitch__service_locator": {"name": "GoSwitch__service_locator", "capabilities": ["Provides go.py flag: --service-locator", "Help: Service locator management (status|test|discover|health|clear|list|benchmark)", "Handler: service_locator_handler"], "examples": [], "announced_at": 1757869019.0189834, "pid": 126207861342336}, "Polymorphic Web Editor (Refactored)": {"name": "Polymorphic Web Editor (Refactored)", "capabilities": ["REFACTORED: Uses service locator for dependencies", "Universal web interface with 3-method pattern", "ask('discovered services') - query available services", "tell('html', service_data) - generate dynamic UI", "do('start server') - manage web server operations", "Distributed web editing with service discovery"], "examples": ["web_editor.ask('service capabilities')", "web_editor.tell('html', service_list)", "web_editor.do('refresh services')", "Works with local OR network logger/database services"], "announced_at": 1757869019.0243752, "pid": 126207861342336}, "GoSwitchweb": {"name": "GoSwitchweb", "capabilities": ["Provides go.py flag: web", "Help: START universal web editor (adapts to any mDNS service)", "Handler: _handle_switch"], "examples": [], "announced_at": 1757869019.0245993, "pid": 126207861342336}, "PolymorphicWebEditor (Refactored)ProcessManager": {"name": "PolymorphicWebEditor (Refactored)ProcessManager", "capabilities": ["I manage processes: services/polymorphic_web_editor_refactored.py", "I use ports: 8081", "Call cleanup_processes to clean shutdown", "I am a PROCESS_MANAGER service"], "examples": [], "announced_at": 1757869019.0248744, "pid": 126207861342336}, "Logger Service (Refactored)": {"name": "Logger Service (Refactored)", "capabilities": ["REFACTORED: Uses service locator for dependencies", "Distributed logging with 3-method pattern", "ask('recent logs') - get log history", "tell('json', logs) - format log output", "do('log info message') - log messages", "Backward compatible with function interface"], "examples": ["logger.ask('last 10 errors')", "logger.tell('discord', log_data)", "logger.do('log error Something failed')", "logger.info('Still works like before')"], "announced_at": 1757869019.0467641, "pid": 126207861342336}, "Database Service (Refactored)": {"name": "Database Service (Refactored)", "capabilities": ["REFACTORED: Uses service locator for dependencies", "Works with local OR network services transparently", "ask('tournament 123') - get any data", "tell('json', data) - format any output", "do('update tournament 123 name=foo') - perform actions", "Zero business logic changes from original"], "examples": ["db.ask('top 10 players')", "db.tell('discord', stats)", "db.do('merge org 1 into 2')", "Works with both local and network logger/error services"], "announced_at": 1757869019.0517929, "pid": 126207861342336}, "Error Handler Service (Refactored)": {"name": "Error Handler Service (Refactored)", "capabilities": ["REFACTORED: Uses service locator for dependencies", "Distributed error handling with 3-method pattern", "ask('error history') - Query error logs and patterns", "tell('discord', errors) - Format error reports", "do('handle exception') - Process and recover from errors", "Works with local OR network logger service"], "examples": ["error_handler.ask('recent errors')", "error_handler.do('clear history')", "error_handler.tell('json', error_data)", "Works transparently with network services"], "announced_at": 1757869019.1381276, "pid": 126207861342336}, "Claude CLI Service (Refactored)": {"name": "Claude CLI Service (Refactored)", "capabilities": ["REFACTORED: Uses service locator for dependencies", "AI processing with 3-method pattern", "ask('What are recent tournaments?') - AI queries", "tell('discord', ai_response) - format AI responses", "do('process queue') - manage AI request processing", "Distributed AI processing with queue management"], "examples": ["claude.ask('Analyze tournament data')", "claude.tell('summary', ai_response)", "claude.do('clear queue')", "Works with local OR network logger/error services"], "announced_at": 1757869019.1614883, "pid": 126207861342336}, "GoSwitchai": {"name": "GoSwitchai", "capabilities": ["Provides go.py flag: ai", "Help: START AI chat service (chat|test)", "Handler: _handle_switch"], "examples": [], "announced_at": 1757869019.1617424, "pid": 126207861342336}, "Config Service (Refactored)": {"name": "Config Service (Refactored)", "capabilities": ["REFACTORED: Uses service locator for dependencies", "Centralized configuration with 3-method pattern", "ask('discord token') - get config values", "tell('json', config) - format configuration", "do('validate tokens') - validate configuration", "Distributed config management with logging"], "examples": ["config.ask('discord token')", "config.ask('all tokens')", "config.do('validate tokens')", "config.tell('discord', config_data)"], "announced_at": 1757869019.1666114, "pid": 126207861342336}, "Interactive Service (Refactored)": {"name": "Interactive Service (Refactored)", "capabilities": ["REFACTORED: Uses service locator for dependencies", "REPL and interactive features with 3-method pattern", "ask('repl status') - query interactive session state", "tell('help', commands) - format help and documentation", "do('start repl') - manage interactive sessions", "Distributed interactive sessions with service discovery"], "examples": ["interactive.ask('session stats')", "interactive.tell('console', help_data)", "interactive.do('start ai chat')", "Works with local OR network database/claude services"], "announced_at": 1757869019.185455, "pid": 126207861342336}, "GoSwitchinteractive": {"name": "GoSwitchinteractive", "capabilities": ["Provides go.py flag: interactive", "Help: START interactive bridge/repl (auto|lightweight|claude)", "Handler: _handle_switch"], "examples": [], "announced_at": 1757869019.1854742, "pid": 126207861342336}, "Report Service (Refactored)": {"name": "Report Service (Refactored)", "capabilities": ["Report generation with 3-method pattern", "ask('status') - Query report status and information", "tell('discord', data) - Format report data for output", "do('console report') - Generate reports and perform operations", "Supports: console, heatmap, stats, all", "Uses service locator for transparent local/network operation"], "examples": ["report.ask('status')", "report.do('console report')", "report.do('heatmap')", "report.tell('discord')"], "announced_at": 1757869020.1880505, "pid": 126207861342336}, "Process Service (Refactored)": {"name": "Process Service (Refactored)", "capabilities": ["Process management with 3-method pattern", "ask('status') - Query process status and information", "tell('discord', data) - Format process data for output", "do('restart services') - Perform process management operations", "Essential infrastructure - cannot be consolidated", "Uses service locator for transparent local/network operation"], "examples": ["process.ask('status')", "process.do('restart services')", "process.do('check status')", "process.tell('discord')"], "announced_at": 1757869020.1949573, "pid": 126207861342336}, "Analytics Service (Refactored)": {"name": "Analytics Service (Refactored)", "capabilities": ["Tournament analytics with 3-method pattern", "ask('tournament data') - Query analytics data and information", "tell('discord', data) - Format analytics data for output", "do('heatmap') - Generate analytics and perform operations", "Consolidated: heatmaps, reports, player analysis, advanced analytics", "Uses service locator for transparent local/network operation"], "examples": ["analytics.ask('status')", "analytics.do('heatmap')", "analytics.do('tournament report')", "analytics.tell('discord')"], "announced_at": 1757869020.198858, "pid": 126207861342336}, "GoSwitch__analytics": {"name": "GoSwitch__analytics", "capabilities": ["Provides go.py flag: --analytics", "Help: START analytics generation (heatmap|stats|identify|all)", "Handler: start_analytics_service_refactored"], "examples": [], "announced_at": 1757869020.1993592, "pid": 126207861342336}, "Tournament Sync Service": {"name": "Tournament Sync Service", "capabilities": ["Tournament synchronization with 3-method pattern", "ask('last sync') - Get sync status and history", "tell('discord', stats) - Format sync results", "do('sync tournaments') - Perform sync operations", "Smart sync modes: full, recent, smart"], "examples": ["sync.ask('sync history')", "sync.do('sync recent')", "sync.tell('discord')"], "announced_at": 1757869020.20362, "pid": 126207861342336}, "GoSwitch__sync": {"name": "GoSwitch__sync", "capabilities": ["Provides go.py flag: --sync", "Help: START tournament sync (options: recent|full|smart) [+publish]", "Handler: start_sync_service"], "examples": [], "announced_at": 1757869020.2043004, "pid": 126207861342336}, "GoSwitch__webdav_refactored": {"name": "GoSwitch__webdav_refactored", "capabilities": ["Provides go.py flag: --webdav-refactored", "Help: START WebDAV database browser (refactored) (start|status|restart|stop|port:8084)", "Handler: handle_args"], "examples": [], "announced_at": 1757869020.208598, "pid": 126207861342336}, "GoSwitch__webdav_bonjour": {"name": "GoSwitch__webdav_bonjour", "capabilities": ["Provides go.py flag: --webdav-bonjour", "Help: Start WebDAV service using Bonjour discovery [port]", "Handler: webdav_bonjour_handler"], "examples": [], "announced_at": 1757869020.2111099, "pid": 126207861342336}}